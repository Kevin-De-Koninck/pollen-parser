name: Build and tests

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains 3 jobs called "build_dev_with_tests", "build_prod_no_tests" and "test_code_quality"
  build_prod_no_tests:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
  
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v1

    # Runs a single command using the runners shell
    - name: Build the production container and skip all tests
      run: ./build.sh --project prod --skip-tests
  
  # This workflow contains 3 jobs called "build_dev_with_tests", "build_prod_no_tests" and "test_code_quality"
  build_dev_with_tests:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v1

    - name: Build the development container and run all tests
      run: ./build.sh --project dev

  # This workflow contains 3 jobs called "build_dev_with_tests", "build_prod_no_tests" and "test_code_quality"
  test_code_quality:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v1
      with:
        python-version: '3.8'

    # Runs a command using the runners shell
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_tests.txt

    - name: Generate a coverage.py file on the local machine by running pytest again
      run: pytest

    - name: Send report to CodeClimate
      run: |
        export GIT_BRANCH="${GITHUB_REF/refs\/heads\//}"
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter
        ./cc-test-reporter format-coverage -t coverage.py coverage.xml
        ./cc-test-reporter upload-coverage -r "${{ secrets.CC_TEST_REPORTER_ID }}"
        
    - name: Rename the source in the converage file since sonarcloud runs inside a Docker container
      run: sed -i "s|$(pwd)|/github/workspace|g" coverage.xml

    - name: Output the content of coverage.xml for debug purposes
      run: cat coverage.xml

    - name: SonarCloud scanner
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
